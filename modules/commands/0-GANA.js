module.exports.config = {
  name: "test",
  version: "2.0.4",
  hasPermssion: 0,
  credits: "Grey",
  description: "Play a song",
  commandCategory: "utility",
  usages: "[title]",
  prefix: true,
  cooldowns: 20,
  dependencies: {
    "fs-extra": "",
    "request": "",
    "axios": "",
    "@distube/ytdl-core": "",
    "yt-search": ""
  }
};

module.exports.run = async ({ api, event }) => {
  const axios = require("axios");
  const fs = require("fs-extra");
  const ytdl = require("@distube/ytdl-core");
  const yts = require("yt-search");

  const input = event.body;
  const data = input.split(" ");

  // Check if the song title is provided
  if (data.length < 2) {
    return api.sendMessage("‡§ï‡•É‡§™‡§Ø‡§æ ‡§è‡§ï ‡§ó‡§æ‡§®‡§æ ‡§°‡§æ‡§≤‡•á‡§Ç‡•§", event.threadID);
  }

  // Remove the command part and get the song title
  data.shift();
  const song = data.join(" ");

  try {
    api.sendMessage(`"${song}" ‡§¢‡•Ç‡§Ç‡§¢‡§æ ‡§ú‡§æ ‡§∞‡§π‡§æ ‡§π‡•à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§™‡•ç‡§∞‡§§‡•Ä‡§ï‡•ç‡§∑‡§æ ‡§ï‡§∞‡•á‡§Ç...`, event.threadID);

    // Search for the song on YouTube
    const searchResults = await yts(song);
    if (!searchResults.videos.length) {
      return api.sendMessage("‡§§‡•ç‡§∞‡•Å‡§ü‡§ø: ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§Ö‡§®‡•Å‡§∞‡•ã‡§ß ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡•§", event.threadID, event.messageID);
    }

    const video = searchResults.videos[0];
    const videoUrl = video.url;

    // Download the audio
    const stream = ytdl(videoUrl, { filter: "audioonly" });

    const fileName = `${event.senderID}.mp3`;
    const filePath = __dirname + `/cache/${fileName}`;

    // Pipe the stream to the file system
    stream.pipe(fs.createWriteStream(filePath));

    stream.on('response', () => {
      console.info('[DOWNLOADER]', 'Download ‡§∂‡•Å‡§∞‡•Ç ‡§π‡•ã ‡§∞‡§π‡§æ ‡§π‡•à!');
    });

    stream.on('info', (info) => {
      console.info('[DOWNLOADER]', `Downloading: ${info.videoDetails.title} by ${info.videoDetails.author.name}`);
    });

    stream.on('end', () => {
      console.info('[DOWNLOADER]', 'Download ‡§™‡•Ç‡§∞‡§æ ‡§π‡•ã ‡§ó‡§Ø‡§æ‡•§');

      // Check if the file is larger than 25MB
      if (fs.statSync(filePath).size > 26214400) {
        fs.unlinkSync(filePath);
        return api.sendMessage('[‡§§‡•ç‡§∞‡•Å‡§ü‡§ø] ‡§´‡§º‡§æ‡§á‡§≤ 25MB ‡§∏‡•á ‡§¨‡§°‡§º‡•Ä ‡§π‡•à ‡§î‡§∞ ‡§®‡§π‡•Ä‡§Ç ‡§≠‡•á‡§ú‡•Ä ‡§ú‡§æ ‡§∏‡§ï‡§§‡•Ä‡•§', event.threadID);
      }

      const message = {
        body: `‡§Ø‡•á ‡§∞‡§π‡§æ ‡§Ü‡§™‡§ï‡§æ ‡§∏‡§Ç‡§ó‡•Ä‡§§!ü•∞\n\n‡§∂‡•Ä‡§∞‡•ç‡§∑‡§ï: ${video.title}\n‡§ï‡§≤‡§æ‡§ï‡§æ‡§∞: ${video.author.name}`,
        attachment: fs.createReadStream(filePath)
      };

      // Send the message with the music file
      api.sendMessage(message, event.threadID, () => {
        // Remove the file after sending
        fs.unlinkSync(filePath);
      });
    });
  } catch (error) {
    console.error('[ERROR]', error);
    api.sendMessage('‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§ï‡•ã ‡§™‡•ç‡§∞‡•ã‡§∏‡•á‡§∏ ‡§ï‡§∞‡§§‡•á ‡§∏‡§Æ‡§Ø ‡§è‡§ï ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø ‡§π‡•Å‡§à‡•§', event.threadID);
  }
};
